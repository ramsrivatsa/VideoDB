plugins {
    id 'java'
    id 'cpp'
    id 'maven' // for install to local maven repository
    id 'nebula.provided-base' version '3.0.3' // for provided configuration
    id 'com.dorongold.task-tree' version '1.2.1' // for debug gradle task debug
    //id 'com.github.johnrengelman.shadow' version '1.2.3' // for build shadow jar
}

group = 'nl.tno'
version = '0.8.3-SNAPSHOT'

description = """StormCV
This is a fork of original [StormCV](https://github.com/sensorstorm/StormCV) with OpenCV upgraded to
3.1.0 and other bug fixes and improvement.
"""

sourceCompatibility = 1.7
targetCompatibility = 1.7

wrapper.gradleVersion = 2.11

repositories {
    jcenter()
    mavenLocal()
    maven {
        url 'http://xuggle.googlecode.com/svn/trunk/repo/share/java/'
        artifactUrls 'http://xuggle.googlecode.com/svn/trunk/repo/share/java/xuggle'
    }
}

dependencies {
    provided group: 'org.apache.storm', name: 'storm-core', version:'0.10.0'

    compile group: 'org.opencv', name: 'opencv', version:'3.1.0'
    compile group: 'xuggle', name: 'xuggle-xuggler', version:'5.4'
    compile group: 'commons-net', name: 'commons-net', version:'3.4'

    // TODO: update to latest version
    compile group: 'com.amazonaws', name: 'aws-java-sdk', version:'1.4.7'
    compile group: 'com.sun.jersey', name: 'jersey-bundle', version:'1.18'
    compile group: 'com.google.guava', name: 'guava', version:'18.0'
    compile group: 'org.slf4j', name: 'slf4j-api', version:'1.7.19'

    testCompile group: 'org.slf4j', name: 'slf4j-simple', version:'1.7.19'
}

uploadArchives {
    repositories.mavenDeployer {
        repository url:repositories.mavenLocal().getUrl()
    }
}

if (plugins.hasPlugin('com.github.johnrengelman.shadow')) {
    shadowJar {
        dependencies {
            exclude(dependency('org.apache.storm:storm-core'))
        }
    }
}

task generateJNIHeaders(dependsOn: compileJava) {
    ext.inputClasses = ["xyz.unlimitedcodeworks.opencv.dnn.ForwardNet"]
    ext.outputDir = file("$buildDir/native-headers")

    description = 'Generate JNI headers'

    inputs.files sourceSets.main.allJava
    outputs.dir outputDir
    doLast {
        if (!inputClasses.empty) {
            def cp = ""
            sourceSets.each {
                if (!cp.empty) {
                    cp += File.pathSeparator
                }
                cp += it.output.classesDir
            }
            cp += File.pathSeparator + configurations.compile.asPath

            logger.quiet('Generating native JNI headers to ' + outputDir.getAbsolutePath())
            outputDir.mkdirs()
            logger.quiet('Generating JNI header for ' + inputClasses)
            ant.javah(class: inputClasses.join(','), destdir: outputDir, classpath: cp)
        }
    }
}

task compileJNILibraries(type: Exec) {
    ext.outputDir = "$buildDir/generated-resources"
    description = "Compile JNI libraries"

    inputs.sourceDir "src/main/jni"
    inputs.file generateJNIHeaders
    outputs.dir outputDir

    sourceSets.main.output.dir outputDir, builtBy: compileJNILibraries

    workingDir "$buildDir"
    executable "$projectDir/src/main/jni/resources/compile.sh"
    args = ["native-builds", outputDir, generateJNIHeaders.outputDir,
            "$projectDir/src/main/jni"]
}
